package server;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import common.DropboxConstants;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Class: DropboxServer
 * Description: Receives file stream, parses the stream and synchronizes it to the disk
 */

public class DropboxServer implements FileSynchronizationServer {

	public void listen() {

    	Socket s = null;
        DataInputStream is = null;
        ServerSocket serverSocket = null;
    	try{
        	serverSocket = new ServerSocket(DropboxConstants.SERVER_PORT);
        	while(true) {
        		s = serverSocket.accept();
        		is = new DataInputStream(s.getInputStream());
        		int fileNumber = readFileNumber(is);
        		for (int i = 0; i < fileNumber; i++) {
        			fileProcess(is);
        		}
        	}
    	}
    	catch(IOException ex) {
    		System.out.println("Socket Error or File Processing Error!");
            Logger.getLogger(DropboxServer.class.getName()).log(Level.SEVERE, null, ex);
    	}
        finally {
            try {
                if(serverSocket != null)
                    serverSocket.close();
                if(s != null)
                    s.close();
                if(is != null)
                    is.close();
            } catch (IOException ex) {
                Logger.getLogger(DropboxServer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void fileProcess(DataInputStream is) throws IOException {

    	byte operation = getFileOperation(is);

        if(operation != DropboxConstants.DELETE) {
	        String fileName = getFileName(is);
	        long fileLastModifiedTime = getFileLastModifiedTime(is);
	        boolean isDir = getIsDirFlag(is);
	        long fileSize = getFileSize(is);
	        saveOneFileToDisk(is, DropboxConstants.DROPBOX_DIRECTORY+fileName, fileSize, fileLastModifiedTime, isDir);
        }
        else {
            String fullPath = DropboxConstants.DROPBOX_DIRECTORY+getFileName(is);
            File fileObj = new File(fullPath);
            if(fileObj.isDirectory()) {
            	deleteDirAndSubsidiaries(fileObj);
            	System.out.println("delete dir and its subsidiaries:"+ fullPath);
            }
            else {
            	System.out.println("delete file:"+ fullPath);
                fileObj.delete();
            }
        }
    }

    private void deleteDirAndSubsidiaries(File f) {
    	  if(f.isDirectory()) {
    		  for (File c : f.listFiles())
    			  deleteDirAndSubsidiaries(c);
    	  }

    	  f.delete();
    }

    private int readFileNumber(DataInputStream is) throws IOException {
        return is.readInt();
    }

    private byte getFileOperation(DataInputStream is) throws IOException {
    	return is.readByte();
    }

    private String getFileName(DataInputStream is) throws IOException {
        int nameLen = is.readInt();
        byte[] result = new byte[nameLen];
        is.read(result);
        return new String(result);
    }

    private long getFileLastModifiedTime(DataInputStream is) throws IOException {
 	return is.readLong();
    }

    private boolean getIsDirFlag(DataInputStream is) throws IOException {
        return is.readBoolean();
    }


    private long getFileSize(DataInputStream is) throws IOException {
        return is.readLong();
    }

    private void saveOneFileToDisk(DataInputStream is, String fullPath, long fileSize, long lastModifiedTime, boolean isDir) {
        FileOutputStream os = null;
        try {
            String filePath = fullPath.substring(0, fullPath.lastIndexOf(System.getProperty("file.separator")));
            File fileDir = new File(filePath);
            File fileObj = new File(fullPath);  

            if (isDir) {
                fileObj.mkdirs();
                System.out.println("add dir: " + fullPath);
            } 
            else {
                fileDir.mkdirs();
            }
            if (!isDir) {            	
                if (!fileObj.exists()) {
                    os = new FileOutputStream(fileObj);
                    fileObj.createNewFile();
                    System.out.println("add file: " + fullPath);
                    byte[] buffer = new byte[1];
                    int count = 0;
                    while (count < fileSize) {
                        int n = is.read(buffer);
                        os.write(buffer, 0, n);
                        count += n;
                    }
                    fileObj.setLastModified(lastModifiedTime);
                } 
                else if (fileObj.lastModified() != lastModifiedTime) {
                    os = new FileOutputStream(fileObj);
                    System.out.println("update file: " + fullPath);
                    byte[] buffer = new byte[1];
                    int count = 0;
                    while (count < fileSize) {
                        int n = is.read(buffer);
                        // n=-1?
                        os.write(buffer, 0, n);
                        count += n;
                    }
                    fileObj.setLastModified(lastModifiedTime);
                } 
                else {
                    is.skip(fileSize);
                }
            } 
            else {
                is.skip(fileSize);
            }

        } 
        catch (IOException ex) {
            System.out.println("Saving File Error!");
            Logger.getLogger(DropboxServer.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally {
            try {
                if(os != null)
                    os.close();
            } 
            catch (IOException ex) {
                Logger.getLogger(DropboxServer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public static void main(String[] args) {
    	DropboxServer server = new DropboxServer();
    	System.out.println("Server started..");
    	server.listen();
    }
}
